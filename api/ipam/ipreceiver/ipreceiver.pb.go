// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: ipreceiver.proto

package ipreceiver

import (
	ipprovider "cisco-app-networking.github.io/nsm-nse/api/ipam/ipprovider"
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type IpRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier *RangeIdentifier     `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Prefix     *ipprovider.IpPrefix `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *IpRange) Reset() {
	*x = IpRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipreceiver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpRange) ProtoMessage() {}

func (x *IpRange) ProtoReflect() protoreflect.Message {
	mi := &file_ipreceiver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpRange.ProtoReflect.Descriptor instead.
func (*IpRange) Descriptor() ([]byte, []int) {
	return file_ipreceiver_proto_rawDescGZIP(), []int{0}
}

func (x *IpRange) GetIdentifier() *RangeIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *IpRange) GetPrefix() *ipprovider.IpPrefix {
	if x != nil {
		return x.Prefix
	}
	return nil
}

type RangeIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fqdn               string `protobuf:"bytes,1,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	ConnectivityDomain string `protobuf:"bytes,3,opt,name=connectivity_domain,json=connectivityDomain,proto3" json:"connectivity_domain,omitempty"`
}

func (x *RangeIdentifier) Reset() {
	*x = RangeIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipreceiver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeIdentifier) ProtoMessage() {}

func (x *RangeIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_ipreceiver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeIdentifier.ProtoReflect.Descriptor instead.
func (*RangeIdentifier) Descriptor() ([]byte, []int) {
	return file_ipreceiver_proto_rawDescGZIP(), []int{1}
}

func (x *RangeIdentifier) GetFqdn() string {
	if x != nil {
		return x.Fqdn
	}
	return ""
}

func (x *RangeIdentifier) GetConnectivityDomain() string {
	if x != nil {
		return x.ConnectivityDomain
	}
	return ""
}

var File_ipreceiver_proto protoreflect.FileDescriptor

var file_ipreceiver_proto_rawDesc = []byte{
	0x0a, 0x10, 0x69, 0x70, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x69, 0x70, 0x70, 0x6f, 0x6f, 0x6c, 0x1a, 0x4b, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x2d, 0x61, 0x70, 0x70, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x69, 0x6f, 0x2f, 0x6e, 0x73, 0x6d, 0x2d, 0x6e,
	0x73, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x70, 0x61, 0x6d, 0x2f, 0x69, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x69, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6c, 0x0a, 0x07, 0x49, 0x70, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x70, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x70,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x49, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x56, 0x0a, 0x0f, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x71, 0x64, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x12, 0x2f, 0x0a, 0x13,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x32, 0x7a, 0x0a,
	0x14, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x0b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x0f, 0x2e, 0x69, 0x70, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x49, 0x70,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x69, 0x70, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x0d, 0x55, 0x6e, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x0f, 0x2e, 0x69, 0x70, 0x70, 0x6f, 0x6f, 0x6c,
	0x2e, 0x49, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x69, 0x70, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x0c, 0x5a, 0x0a, 0x69, 0x70, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ipreceiver_proto_rawDescOnce sync.Once
	file_ipreceiver_proto_rawDescData = file_ipreceiver_proto_rawDesc
)

func file_ipreceiver_proto_rawDescGZIP() []byte {
	file_ipreceiver_proto_rawDescOnce.Do(func() {
		file_ipreceiver_proto_rawDescData = protoimpl.X.CompressGZIP(file_ipreceiver_proto_rawDescData)
	})
	return file_ipreceiver_proto_rawDescData
}

var file_ipreceiver_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_ipreceiver_proto_goTypes = []interface{}{
	(*IpRange)(nil),             // 0: ippool.IpRange
	(*RangeIdentifier)(nil),     // 1: ippool.RangeIdentifier
	(*ipprovider.IpPrefix)(nil), // 2: ippool.IpPrefix
	(*ipprovider.Empty)(nil),    // 3: ippool.Empty
}
var file_ipreceiver_proto_depIdxs = []int32{
	1, // 0: ippool.IpRange.identifier:type_name -> ippool.RangeIdentifier
	2, // 1: ippool.IpRange.prefix:type_name -> ippool.IpPrefix
	0, // 2: ippool.PrefixRangeAllocator.AssignRange:input_type -> ippool.IpRange
	0, // 3: ippool.PrefixRangeAllocator.UnassignRange:input_type -> ippool.IpRange
	3, // 4: ippool.PrefixRangeAllocator.AssignRange:output_type -> ippool.Empty
	3, // 5: ippool.PrefixRangeAllocator.UnassignRange:output_type -> ippool.Empty
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_ipreceiver_proto_init() }
func file_ipreceiver_proto_init() {
	if File_ipreceiver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ipreceiver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipreceiver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ipreceiver_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ipreceiver_proto_goTypes,
		DependencyIndexes: file_ipreceiver_proto_depIdxs,
		MessageInfos:      file_ipreceiver_proto_msgTypes,
	}.Build()
	File_ipreceiver_proto = out.File
	file_ipreceiver_proto_rawDesc = nil
	file_ipreceiver_proto_goTypes = nil
	file_ipreceiver_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PrefixRangeAllocatorClient is the client API for PrefixRangeAllocator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PrefixRangeAllocatorClient interface {
	AssignRange(ctx context.Context, in *IpRange, opts ...grpc.CallOption) (*ipprovider.Empty, error)
	UnassignRange(ctx context.Context, in *IpRange, opts ...grpc.CallOption) (*ipprovider.Empty, error)
}

type prefixRangeAllocatorClient struct {
	cc grpc.ClientConnInterface
}

func NewPrefixRangeAllocatorClient(cc grpc.ClientConnInterface) PrefixRangeAllocatorClient {
	return &prefixRangeAllocatorClient{cc}
}

func (c *prefixRangeAllocatorClient) AssignRange(ctx context.Context, in *IpRange, opts ...grpc.CallOption) (*ipprovider.Empty, error) {
	out := new(ipprovider.Empty)
	err := c.cc.Invoke(ctx, "/ippool.PrefixRangeAllocator/AssignRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prefixRangeAllocatorClient) UnassignRange(ctx context.Context, in *IpRange, opts ...grpc.CallOption) (*ipprovider.Empty, error) {
	out := new(ipprovider.Empty)
	err := c.cc.Invoke(ctx, "/ippool.PrefixRangeAllocator/UnassignRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrefixRangeAllocatorServer is the server API for PrefixRangeAllocator service.
type PrefixRangeAllocatorServer interface {
	AssignRange(context.Context, *IpRange) (*ipprovider.Empty, error)
	UnassignRange(context.Context, *IpRange) (*ipprovider.Empty, error)
}

// UnimplementedPrefixRangeAllocatorServer can be embedded to have forward compatible implementations.
type UnimplementedPrefixRangeAllocatorServer struct {
}

func (*UnimplementedPrefixRangeAllocatorServer) AssignRange(context.Context, *IpRange) (*ipprovider.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignRange not implemented")
}
func (*UnimplementedPrefixRangeAllocatorServer) UnassignRange(context.Context, *IpRange) (*ipprovider.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnassignRange not implemented")
}

func RegisterPrefixRangeAllocatorServer(s *grpc.Server, srv PrefixRangeAllocatorServer) {
	s.RegisterService(&_PrefixRangeAllocator_serviceDesc, srv)
}

func _PrefixRangeAllocator_AssignRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpRange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrefixRangeAllocatorServer).AssignRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ippool.PrefixRangeAllocator/AssignRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrefixRangeAllocatorServer).AssignRange(ctx, req.(*IpRange))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrefixRangeAllocator_UnassignRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpRange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrefixRangeAllocatorServer).UnassignRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ippool.PrefixRangeAllocator/UnassignRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrefixRangeAllocatorServer).UnassignRange(ctx, req.(*IpRange))
	}
	return interceptor(ctx, in, info, handler)
}

var _PrefixRangeAllocator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ippool.PrefixRangeAllocator",
	HandlerType: (*PrefixRangeAllocatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignRange",
			Handler:    _PrefixRangeAllocator_AssignRange_Handler,
		},
		{
			MethodName: "UnassignRange",
			Handler:    _PrefixRangeAllocator_UnassignRange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipreceiver.proto",
}
