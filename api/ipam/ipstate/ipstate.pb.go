// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: ipstate.proto

package ipstate

import (
	ipprovider "cisco-app-networking.github.io/nsm-nse/api/ipam/ipprovider"
	ipreceiver "cisco-app-networking.github.io/nsm-nse/api/ipam/ipreceiver"
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SubnetsState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet []*ipprovider.Subnet `protobuf:"bytes,1,rep,name=subnet,proto3" json:"subnet,omitempty"`
}

func (x *SubnetsState) Reset() {
	*x = SubnetsState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipstate_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetsState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetsState) ProtoMessage() {}

func (x *SubnetsState) ProtoReflect() protoreflect.Message {
	mi := &file_ipstate_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetsState.ProtoReflect.Descriptor instead.
func (*SubnetsState) Descriptor() ([]byte, []int) {
	return file_ipstate_proto_rawDescGZIP(), []int{0}
}

func (x *SubnetsState) GetSubnet() []*ipprovider.Subnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

type IpRangesState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Range []*ipreceiver.IpRange `protobuf:"bytes,1,rep,name=range,proto3" json:"range,omitempty"`
}

func (x *IpRangesState) Reset() {
	*x = IpRangesState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipstate_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpRangesState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpRangesState) ProtoMessage() {}

func (x *IpRangesState) ProtoReflect() protoreflect.Message {
	mi := &file_ipstate_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpRangesState.ProtoReflect.Descriptor instead.
func (*IpRangesState) Descriptor() ([]byte, []int) {
	return file_ipstate_proto_rawDescGZIP(), []int{1}
}

func (x *IpRangesState) GetRange() []*ipreceiver.IpRange {
	if x != nil {
		return x.Range
	}
	return nil
}

type PrefixIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier *ipreceiver.RangeIdentifier `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	AddrFamily *ipprovider.IpFamily        `protobuf:"bytes,2,opt,name=addr_family,json=addrFamily,proto3" json:"addr_family,omitempty"`
}

func (x *PrefixIdentifier) Reset() {
	*x = PrefixIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipstate_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrefixIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrefixIdentifier) ProtoMessage() {}

func (x *PrefixIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_ipstate_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrefixIdentifier.ProtoReflect.Descriptor instead.
func (*PrefixIdentifier) Descriptor() ([]byte, []int) {
	return file_ipstate_proto_rawDescGZIP(), []int{2}
}

func (x *PrefixIdentifier) GetIdentifier() *ipreceiver.RangeIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *PrefixIdentifier) GetAddrFamily() *ipprovider.IpFamily {
	if x != nil {
		return x.AddrFamily
	}
	return nil
}

var File_ipstate_proto protoreflect.FileDescriptor

var file_ipstate_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x69, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x69, 0x70, 0x70, 0x6f, 0x6f, 0x6c, 0x1a, 0x4b, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x2d, 0x61,
	0x70, 0x70, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x69, 0x6f, 0x2f, 0x6e, 0x73, 0x6d, 0x2d, 0x6e, 0x73, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x69, 0x70, 0x61, 0x6d, 0x2f, 0x69, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2f, 0x69, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4b, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x2d, 0x61, 0x70, 0x70, 0x2d,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x69, 0x6f, 0x2f, 0x6e, 0x73, 0x6d, 0x2d, 0x6e, 0x73, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x69, 0x70, 0x61, 0x6d, 0x2f, 0x69, 0x70, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x2f, 0x69, 0x70, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x36, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x69, 0x70, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x22, 0x36, 0x0a, 0x0d, 0x49, 0x70, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x70, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x49, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x22, 0x7e, 0x0a, 0x10, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x69, 0x70, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x31,
	0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x70, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x49, 0x70, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x32, 0xa9, 0x01, 0x0a, 0x15, 0x49, 0x70, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x72, 0x6f, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x47, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x73, 0x12, 0x18, 0x2e, 0x69, 0x70, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x14, 0x2e, 0x69,
	0x70, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x69, 0x70, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x1a, 0x15, 0x2e, 0x69, 0x70, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x49, 0x70,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x00, 0x42, 0x09, 0x5a,
	0x07, 0x69, 0x70, 0x73, 0x74, 0x61, 0x74, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ipstate_proto_rawDescOnce sync.Once
	file_ipstate_proto_rawDescData = file_ipstate_proto_rawDesc
)

func file_ipstate_proto_rawDescGZIP() []byte {
	file_ipstate_proto_rawDescOnce.Do(func() {
		file_ipstate_proto_rawDescData = protoimpl.X.CompressGZIP(file_ipstate_proto_rawDescData)
	})
	return file_ipstate_proto_rawDescData
}

var file_ipstate_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_ipstate_proto_goTypes = []interface{}{
	(*SubnetsState)(nil),               // 0: ippool.SubnetsState
	(*IpRangesState)(nil),              // 1: ippool.IpRangesState
	(*PrefixIdentifier)(nil),           // 2: ippool.PrefixIdentifier
	(*ipprovider.Subnet)(nil),          // 3: ippool.Subnet
	(*ipreceiver.IpRange)(nil),         // 4: ippool.IpRange
	(*ipreceiver.RangeIdentifier)(nil), // 5: ippool.RangeIdentifier
	(*ipprovider.IpFamily)(nil),        // 6: ippool.IpFamily
}
var file_ipstate_proto_depIdxs = []int32{
	3, // 0: ippool.SubnetsState.subnet:type_name -> ippool.Subnet
	4, // 1: ippool.IpRangesState.range:type_name -> ippool.IpRange
	5, // 2: ippool.PrefixIdentifier.identifier:type_name -> ippool.RangeIdentifier
	6, // 3: ippool.PrefixIdentifier.addr_family:type_name -> ippool.IpFamily
	2, // 4: ippool.IpamStateInterrogator.GetAllocatedSubnets:input_type -> ippool.PrefixIdentifier
	2, // 5: ippool.IpamStateInterrogator.GetAllocatedRanges:input_type -> ippool.PrefixIdentifier
	0, // 6: ippool.IpamStateInterrogator.GetAllocatedSubnets:output_type -> ippool.SubnetsState
	1, // 7: ippool.IpamStateInterrogator.GetAllocatedRanges:output_type -> ippool.IpRangesState
	6, // [6:8] is the sub-list for method output_type
	4, // [4:6] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_ipstate_proto_init() }
func file_ipstate_proto_init() {
	if File_ipstate_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ipstate_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetsState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipstate_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpRangesState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipstate_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrefixIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ipstate_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ipstate_proto_goTypes,
		DependencyIndexes: file_ipstate_proto_depIdxs,
		MessageInfos:      file_ipstate_proto_msgTypes,
	}.Build()
	File_ipstate_proto = out.File
	file_ipstate_proto_rawDesc = nil
	file_ipstate_proto_goTypes = nil
	file_ipstate_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IpamStateInterrogatorClient is the client API for IpamStateInterrogator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IpamStateInterrogatorClient interface {
	GetAllocatedSubnets(ctx context.Context, in *PrefixIdentifier, opts ...grpc.CallOption) (*SubnetsState, error)
	GetAllocatedRanges(ctx context.Context, in *PrefixIdentifier, opts ...grpc.CallOption) (*IpRangesState, error)
}

type ipamStateInterrogatorClient struct {
	cc grpc.ClientConnInterface
}

func NewIpamStateInterrogatorClient(cc grpc.ClientConnInterface) IpamStateInterrogatorClient {
	return &ipamStateInterrogatorClient{cc}
}

func (c *ipamStateInterrogatorClient) GetAllocatedSubnets(ctx context.Context, in *PrefixIdentifier, opts ...grpc.CallOption) (*SubnetsState, error) {
	out := new(SubnetsState)
	err := c.cc.Invoke(ctx, "/ippool.IpamStateInterrogator/GetAllocatedSubnets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipamStateInterrogatorClient) GetAllocatedRanges(ctx context.Context, in *PrefixIdentifier, opts ...grpc.CallOption) (*IpRangesState, error) {
	out := new(IpRangesState)
	err := c.cc.Invoke(ctx, "/ippool.IpamStateInterrogator/GetAllocatedRanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IpamStateInterrogatorServer is the server API for IpamStateInterrogator service.
type IpamStateInterrogatorServer interface {
	GetAllocatedSubnets(context.Context, *PrefixIdentifier) (*SubnetsState, error)
	GetAllocatedRanges(context.Context, *PrefixIdentifier) (*IpRangesState, error)
}

// UnimplementedIpamStateInterrogatorServer can be embedded to have forward compatible implementations.
type UnimplementedIpamStateInterrogatorServer struct {
}

func (*UnimplementedIpamStateInterrogatorServer) GetAllocatedSubnets(context.Context, *PrefixIdentifier) (*SubnetsState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllocatedSubnets not implemented")
}
func (*UnimplementedIpamStateInterrogatorServer) GetAllocatedRanges(context.Context, *PrefixIdentifier) (*IpRangesState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllocatedRanges not implemented")
}

func RegisterIpamStateInterrogatorServer(s *grpc.Server, srv IpamStateInterrogatorServer) {
	s.RegisterService(&_IpamStateInterrogator_serviceDesc, srv)
}

func _IpamStateInterrogator_GetAllocatedSubnets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrefixIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpamStateInterrogatorServer).GetAllocatedSubnets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ippool.IpamStateInterrogator/GetAllocatedSubnets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpamStateInterrogatorServer).GetAllocatedSubnets(ctx, req.(*PrefixIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpamStateInterrogator_GetAllocatedRanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrefixIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpamStateInterrogatorServer).GetAllocatedRanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ippool.IpamStateInterrogator/GetAllocatedRanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpamStateInterrogatorServer).GetAllocatedRanges(ctx, req.(*PrefixIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

var _IpamStateInterrogator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ippool.IpamStateInterrogator",
	HandlerType: (*IpamStateInterrogatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllocatedSubnets",
			Handler:    _IpamStateInterrogator_GetAllocatedSubnets_Handler,
		},
		{
			MethodName: "GetAllocatedRanges",
			Handler:    _IpamStateInterrogator_GetAllocatedRanges_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipstate.proto",
}
