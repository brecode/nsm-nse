// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: ipprovider.proto

package ipprovider

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type IpFamily_Family int32

const (
	IpFamily_IPV4 IpFamily_Family = 0
	IpFamily_IPV6 IpFamily_Family = 1
)

// Enum value maps for IpFamily_Family.
var (
	IpFamily_Family_name = map[int32]string{
		0: "IPV4",
		1: "IPV6",
	}
	IpFamily_Family_value = map[string]int32{
		"IPV4": 0,
		"IPV6": 1,
	}
)

func (x IpFamily_Family) Enum() *IpFamily_Family {
	p := new(IpFamily_Family)
	*p = x
	return p
}

func (x IpFamily_Family) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IpFamily_Family) Descriptor() protoreflect.EnumDescriptor {
	return file_ipprovider_proto_enumTypes[0].Descriptor()
}

func (IpFamily_Family) Type() protoreflect.EnumType {
	return &file_ipprovider_proto_enumTypes[0]
}

func (x IpFamily_Family) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IpFamily_Family.Descriptor instead.
func (IpFamily_Family) EnumDescriptor() ([]byte, []int) {
	return file_ipprovider_proto_rawDescGZIP(), []int{0, 0}
}

type IpFamily struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Family IpFamily_Family `protobuf:"varint,1,opt,name=family,proto3,enum=ippool.IpFamily_Family" json:"family,omitempty"`
}

func (x *IpFamily) Reset() {
	*x = IpFamily{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipprovider_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpFamily) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpFamily) ProtoMessage() {}

func (x *IpFamily) ProtoReflect() protoreflect.Message {
	mi := &file_ipprovider_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpFamily.ProtoReflect.Descriptor instead.
func (*IpFamily) Descriptor() ([]byte, []int) {
	return file_ipprovider_proto_rawDescGZIP(), []int{0}
}

func (x *IpFamily) GetFamily() IpFamily_Family {
	if x != nil {
		return x.Family
	}
	return IpFamily_IPV4
}

type SubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier *Identifier `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	AddrFamily *IpFamily   `protobuf:"bytes,2,opt,name=addr_family,json=addrFamily,proto3" json:"addr_family,omitempty"`
	PrefixLen  uint32      `protobuf:"varint,3,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty"`
}

func (x *SubnetRequest) Reset() {
	*x = SubnetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipprovider_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetRequest) ProtoMessage() {}

func (x *SubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ipprovider_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetRequest.ProtoReflect.Descriptor instead.
func (*SubnetRequest) Descriptor() ([]byte, []int) {
	return file_ipprovider_proto_rawDescGZIP(), []int{1}
}

func (x *SubnetRequest) GetIdentifier() *Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *SubnetRequest) GetAddrFamily() *IpFamily {
	if x != nil {
		return x.AddrFamily
	}
	return nil
}

func (x *SubnetRequest) GetPrefixLen() uint32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

type Subnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier   *Identifier `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Prefix       *IpPrefix   `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	LeaseTimeout int32       `protobuf:"varint,3,opt,name=lease_timeout,json=leaseTimeout,proto3" json:"lease_timeout,omitempty"` // Amount of time a lease can be held without an update in hours
}

func (x *Subnet) Reset() {
	*x = Subnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipprovider_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subnet) ProtoMessage() {}

func (x *Subnet) ProtoReflect() protoreflect.Message {
	mi := &file_ipprovider_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subnet.ProtoReflect.Descriptor instead.
func (*Subnet) Descriptor() ([]byte, []int) {
	return file_ipprovider_proto_rawDescGZIP(), []int{2}
}

func (x *Subnet) GetIdentifier() *Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Subnet) GetPrefix() *IpPrefix {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *Subnet) GetLeaseTimeout() int32 {
	if x != nil {
		return x.LeaseTimeout
	}
	return 0
}

type IpPrefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddrFamily *IpFamily `protobuf:"bytes,1,opt,name=addr_family,json=addrFamily,proto3" json:"addr_family,omitempty"`
	Subnet     string    `protobuf:"bytes,2,opt,name=subnet,proto3" json:"subnet,omitempty"`
}

func (x *IpPrefix) Reset() {
	*x = IpPrefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipprovider_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpPrefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpPrefix) ProtoMessage() {}

func (x *IpPrefix) ProtoReflect() protoreflect.Message {
	mi := &file_ipprovider_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpPrefix.ProtoReflect.Descriptor instead.
func (*IpPrefix) Descriptor() ([]byte, []int) {
	return file_ipprovider_proto_rawDescGZIP(), []int{3}
}

func (x *IpPrefix) GetAddrFamily() *IpFamily {
	if x != nil {
		return x.AddrFamily
	}
	return nil
}

func (x *IpPrefix) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

type Identifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fqdn               string `protobuf:"bytes,1,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	Name               string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ConnectivityDomain string `protobuf:"bytes,3,opt,name=connectivity_domain,json=connectivityDomain,proto3" json:"connectivity_domain,omitempty"`
}

func (x *Identifier) Reset() {
	*x = Identifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipprovider_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifier) ProtoMessage() {}

func (x *Identifier) ProtoReflect() protoreflect.Message {
	mi := &file_ipprovider_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identifier.ProtoReflect.Descriptor instead.
func (*Identifier) Descriptor() ([]byte, []int) {
	return file_ipprovider_proto_rawDescGZIP(), []int{4}
}

func (x *Identifier) GetFqdn() string {
	if x != nil {
		return x.Fqdn
	}
	return ""
}

func (x *Identifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Identifier) GetConnectivityDomain() string {
	if x != nil {
		return x.ConnectivityDomain
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipprovider_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_ipprovider_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_ipprovider_proto_rawDescGZIP(), []int{5}
}

var File_ipprovider_proto protoreflect.FileDescriptor

var file_ipprovider_proto_rawDesc = []byte{
	0x0a, 0x10, 0x69, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x69, 0x70, 0x70, 0x6f, 0x6f, 0x6c, 0x22, 0x59, 0x0a, 0x08, 0x49, 0x70,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x69, 0x70, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x49, 0x70, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52,
	0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x22, 0x1c, 0x0a, 0x06, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x34, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49,
	0x50, 0x56, 0x36, 0x10, 0x01, 0x22, 0x95, 0x01, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x70,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x0b, 0x61,
	0x64, 0x64, 0x72, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x69, 0x70, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x49, 0x70, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x22, 0x8b, 0x01,
	0x0a, 0x06, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69,
	0x70, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69,
	0x70, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x49, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x55, 0x0a, 0x08, 0x49,
	0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x31, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x5f,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69,
	0x70, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x49, 0x70, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52, 0x0a,
	0x61, 0x64, 0x64, 0x72, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x22, 0x65, 0x0a, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x66, 0x71, 0x64, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x32, 0xab, 0x01, 0x0a, 0x09, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x39, 0x0a, 0x0e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x12, 0x15, 0x2e, 0x69, 0x70, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x69, 0x70, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x0a, 0x46,
	0x72, 0x65, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x0e, 0x2e, 0x69, 0x70, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x1a, 0x0d, 0x2e, 0x69, 0x70, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x10, 0x52, 0x65,
	0x6e, 0x65, 0x77, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x0e,
	0x2e, 0x69, 0x70, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x1a, 0x0e,
	0x2e, 0x69, 0x70, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x22, 0x00,
	0x42, 0x0c, 0x5a, 0x0a, 0x69, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ipprovider_proto_rawDescOnce sync.Once
	file_ipprovider_proto_rawDescData = file_ipprovider_proto_rawDesc
)

func file_ipprovider_proto_rawDescGZIP() []byte {
	file_ipprovider_proto_rawDescOnce.Do(func() {
		file_ipprovider_proto_rawDescData = protoimpl.X.CompressGZIP(file_ipprovider_proto_rawDescData)
	})
	return file_ipprovider_proto_rawDescData
}

var file_ipprovider_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ipprovider_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_ipprovider_proto_goTypes = []interface{}{
	(IpFamily_Family)(0),  // 0: ippool.IpFamily.Family
	(*IpFamily)(nil),      // 1: ippool.IpFamily
	(*SubnetRequest)(nil), // 2: ippool.SubnetRequest
	(*Subnet)(nil),        // 3: ippool.Subnet
	(*IpPrefix)(nil),      // 4: ippool.IpPrefix
	(*Identifier)(nil),    // 5: ippool.Identifier
	(*Empty)(nil),         // 6: ippool.Empty
}
var file_ipprovider_proto_depIdxs = []int32{
	0, // 0: ippool.IpFamily.family:type_name -> ippool.IpFamily.Family
	5, // 1: ippool.SubnetRequest.identifier:type_name -> ippool.Identifier
	1, // 2: ippool.SubnetRequest.addr_family:type_name -> ippool.IpFamily
	5, // 3: ippool.Subnet.identifier:type_name -> ippool.Identifier
	4, // 4: ippool.Subnet.prefix:type_name -> ippool.IpPrefix
	1, // 5: ippool.IpPrefix.addr_family:type_name -> ippool.IpFamily
	2, // 6: ippool.Allocator.AllocateSubnet:input_type -> ippool.SubnetRequest
	3, // 7: ippool.Allocator.FreeSubnet:input_type -> ippool.Subnet
	3, // 8: ippool.Allocator.RenewSubnetLease:input_type -> ippool.Subnet
	3, // 9: ippool.Allocator.AllocateSubnet:output_type -> ippool.Subnet
	6, // 10: ippool.Allocator.FreeSubnet:output_type -> ippool.Empty
	3, // 11: ippool.Allocator.RenewSubnetLease:output_type -> ippool.Subnet
	9, // [9:12] is the sub-list for method output_type
	6, // [6:9] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_ipprovider_proto_init() }
func file_ipprovider_proto_init() {
	if File_ipprovider_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ipprovider_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpFamily); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipprovider_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipprovider_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipprovider_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpPrefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipprovider_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipprovider_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ipprovider_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ipprovider_proto_goTypes,
		DependencyIndexes: file_ipprovider_proto_depIdxs,
		EnumInfos:         file_ipprovider_proto_enumTypes,
		MessageInfos:      file_ipprovider_proto_msgTypes,
	}.Build()
	File_ipprovider_proto = out.File
	file_ipprovider_proto_rawDesc = nil
	file_ipprovider_proto_goTypes = nil
	file_ipprovider_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AllocatorClient is the client API for Allocator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AllocatorClient interface {
	AllocateSubnet(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*Subnet, error)
	FreeSubnet(ctx context.Context, in *Subnet, opts ...grpc.CallOption) (*Empty, error)
	RenewSubnetLease(ctx context.Context, in *Subnet, opts ...grpc.CallOption) (*Subnet, error)
}

type allocatorClient struct {
	cc grpc.ClientConnInterface
}

func NewAllocatorClient(cc grpc.ClientConnInterface) AllocatorClient {
	return &allocatorClient{cc}
}

func (c *allocatorClient) AllocateSubnet(ctx context.Context, in *SubnetRequest, opts ...grpc.CallOption) (*Subnet, error) {
	out := new(Subnet)
	err := c.cc.Invoke(ctx, "/ippool.Allocator/AllocateSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allocatorClient) FreeSubnet(ctx context.Context, in *Subnet, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ippool.Allocator/FreeSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allocatorClient) RenewSubnetLease(ctx context.Context, in *Subnet, opts ...grpc.CallOption) (*Subnet, error) {
	out := new(Subnet)
	err := c.cc.Invoke(ctx, "/ippool.Allocator/RenewSubnetLease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AllocatorServer is the server API for Allocator service.
type AllocatorServer interface {
	AllocateSubnet(context.Context, *SubnetRequest) (*Subnet, error)
	FreeSubnet(context.Context, *Subnet) (*Empty, error)
	RenewSubnetLease(context.Context, *Subnet) (*Subnet, error)
}

// UnimplementedAllocatorServer can be embedded to have forward compatible implementations.
type UnimplementedAllocatorServer struct {
}

func (*UnimplementedAllocatorServer) AllocateSubnet(context.Context, *SubnetRequest) (*Subnet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateSubnet not implemented")
}
func (*UnimplementedAllocatorServer) FreeSubnet(context.Context, *Subnet) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreeSubnet not implemented")
}
func (*UnimplementedAllocatorServer) RenewSubnetLease(context.Context, *Subnet) (*Subnet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewSubnetLease not implemented")
}

func RegisterAllocatorServer(s *grpc.Server, srv AllocatorServer) {
	s.RegisterService(&_Allocator_serviceDesc, srv)
}

func _Allocator_AllocateSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllocatorServer).AllocateSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ippool.Allocator/AllocateSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllocatorServer).AllocateSubnet(ctx, req.(*SubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Allocator_FreeSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subnet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllocatorServer).FreeSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ippool.Allocator/FreeSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllocatorServer).FreeSubnet(ctx, req.(*Subnet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Allocator_RenewSubnetLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subnet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllocatorServer).RenewSubnetLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ippool.Allocator/RenewSubnetLease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllocatorServer).RenewSubnetLease(ctx, req.(*Subnet))
	}
	return interceptor(ctx, in, info, handler)
}

var _Allocator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ippool.Allocator",
	HandlerType: (*AllocatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllocateSubnet",
			Handler:    _Allocator_AllocateSubnet_Handler,
		},
		{
			MethodName: "FreeSubnet",
			Handler:    _Allocator_FreeSubnet_Handler,
		},
		{
			MethodName: "RenewSubnetLease",
			Handler:    _Allocator_RenewSubnetLease_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipprovider.proto",
}
